name: Tracker New Releases

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Runs on Sunday at 00:00 UTC
jobs:
  check-releases:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check releases in the last 7 days
      env:
        GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
      run: |
        # Initialize an empty array to hold all starred repositories
        REPOS=()
        
        # Use a loop to paginate through all the results
        page=1
        while : ; do
            # Fetch the list of repositories you've starred for the current page
            starred_repos=$(curl -H "Authorization: token $GH_API_TOKEN" "https://api.github.com/user/starred?per_page=100&page=$page")
        
            # Exit loop if no results are returned
            if [ "$(echo "$starred_repos" | jq -r '. | length')" -eq 0 ]; then
                break
            fi
        
            # Extract full names (e.g., "user/repo") of these repositories and add them to REPOS array
            REPOS+=($(echo "$starred_repos" | jq -r '.[] | .full_name'))
        
            # Move to the next page
            ((page++))
        done
        
        END_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        START_DATE=$(date -u -d "7 days ago" +"%Y-%m-%dT%H:%M:%SZ")
        
        # Start creating the README.md with a title
        echo "# Repositories with Latest Commits within 7 days" > README.md
        echo "" >> README.md
        
        # Now loop through these repositories to get the last commit message
        for repo in "${REPOS[@]}"; do
            echo "Fetching last commit for $repo..."
            
            # Fetch the latest commit from the default branch
            commit_info=$(curl -H "Authorization: token $GH_API_TOKEN" "https://api.github.com/repos/$repo/commits/master")  # Assuming "master" is the default branch. Adjust if using "main" or another branch.
        
            # Extract commit date and message
            commit_date=$(echo "$commit_info" | jq -r '.commit.committer.date')
            commit_message=$(echo "$commit_info" | jq -r '.commit.message')
        
            # Check if the commit is within the last 7 days
            if [[ "$commit_date" > "$START_DATE" && "$commit_date" < "$END_DATE" ]]; then
                # Add repo link and commit message to the README in markdown format
                echo "- [**$repo**](https://github.com/$repo)" >> README.md
                formatted_commit_message=$(echo "$commit_message" | tr '\n' ' ')

                echo "    - *$formatted_commit_message*" >> README.md
                echo "" >> README.md
            fi
        done




    - name: Commit the release information
      run: |
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        git pull
        git add README.md
        git commit -m "Updated list of recent releases" || echo "No new releases"
        git push
